#!/bin/bash

PIDFILE="/run/user/$UID/robair.pid"

if [ -z $ROBAIR_HOME ]; then
  export ROBAIR_HOME="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
  source "$ROBAIR_HOME/scripts/env.bash"
fi

source "$ROBAIR_HOME/scripts/helpers.sh"


startme() {
  if is_running; then
    echo "RobAIR est déjà en cours d'exécution"
    exit 0
  fi

  if should_run_systemd "$@"; then
    exec systemctl --user start robair.service
  fi

  find_ip

  if ! find_arduino; then
    echo "Aucune carte Arduino trouvée" >> /dev/stderr
    export SKIP_ARDUINO=true
  fi

  export ROS_IP=$ROBAIR_IP

  echo $$ > "$PIDFILE"
  exec roslaunch robairmain robair.launch
}

should_run_systemd() {
  [ "$1" = '--systemd' ] && return 1
  state="$(systemctl --user is-enabled robair.service 2>>/dev/null)"
  [ "$state" = 'enabled' -o "$state" = 'linked' ] && return 0
  return 1
}

is_running_systemd() {
  systemctl --user --quiet is-active robair.service
}

is_running() {
  [ -f "$PIDFILE" ] || return 1
  cmd=$(ps --no-headers --pid $(< "$PIDFILE") -o comm)
  test "$cmd" = "roslaunch"
}

stopme() {
  [ -f "$PIDFILE" ] || return 1

  if is_running_systemd; then
    systemctl --user stop robair.service
  else
    kill -SIGINT $(< "$PIDFILE")
    while is_running; do
      sleep 0.5
    done
    rm -f "$PIDFILE"
  fi
}

status() {
  if is_running; then
    echo "$(tput setaf 2)RobAIR est activé$(tput sgr0)"
    exit 0
  else
    echo "$(tput setaf 1)RobAIR est arrêté$(tput sgr0)"
    exit 1
  fi
}

restart() {
  if is_running_systemd; then
    systemctl --user restart robair.service
  else
    stopme
    startme
  fi
}

find_ip() {
  if [ "x$ROBAIR_IP" = 'x' ]; then
    ROBAIR_IP=$(ip route get 8.8.8.8 2>>/dev/null | perl -n -e '/src ([0-9a-f.:]+)/ && print $1')
  fi

  if [ "x$ROBAIR_IP" = 'x' ]; then
    ROBAIR_IP=localhost
  fi

  export ROBAIR_IP

  last_ip_file="$ROBAIR_HOME/data/last_ip"

  if [ -f "$last_ip_file" ] &&
    [ "$ROBAIR_IP" = "$(< "$last_ip_file")" ]; then
    return 0
  fi


  # The address changed since last time
  echo "$ROBAIR_IP" > "$last_ip_file"
}

find_arduino()
{
  ROBAIR_ARDUINO="$(ls --color=never /dev/serial/by-id/*Arduino* 2>>/dev/null)"
  if [ $? -ne 0 ] && [ -c "/tmp/simavr-uart0" ]; then
    ROBAIR_ARDUINO="/tmp/simavr-uart0"
  fi

  last_arduino_file="$ROBAIR_HOME/data/last_arduino"

  if [ "$(echo "$ROBAIR_ARDUINO" | wc -l)" -gt 1 ]; then
	  if [ -f "$last_arduino_file" ] && [ -c "$(< "$last_arduino_file")" ]; then
		  # In case there are multiple Arduino Megas, take the last one used
		  ROBAIR_ARDUINO="$(< "$last_arduino_file")"
	  else
		  # Fallback using the first Arduino listed
		  ROBAIR_ARDUINO="$(echo "$ROBAIR_ARDUINO" | head -n1)"
	  fi
  elif [ -z "$ROBAIR_ARDUINO" ] && [ "$1" != "no-fallback" ]; then
	  if [ -f "$last_arduino_file" ]; then
		  ROBAIR_ARDUINO="$(< "$last_arduino_file")"
	  fi
  fi

  if [ -z "$ROBAIR_ARDUINO" ]; then
      return 1
  fi

  echo "$ROBAIR_ARDUINO" > "$last_arduino_file"
  export ROBAIR_ARDUINO
}

do_reload() {
  start_job "Compile les paquets ROS locaux"
  (cd catkin_ws && catkin_make install)
  end_job

  start_job "Génère la bibliothèque ros_lib pour Arduino"
  rm -rf arduino/libraries/ros_lib
  rosrun rosserial_arduino make_libraries.py arduino/libraries
  end_job

  if ! find_arduino no-fallback; then
    echo "Aucune carte Arduino trouvée" 1>&2
    start_job "Recompile le code Arduino"
    (cd arduino/robairarduino && make clean && make)
    end_job
  else
    export MONITOR_PORT="$ROBAIR_ARDUINO"
    start_job "Met à jour la carte Arduino"
    (cd arduino/robairarduino && make clean && make upload)
    end_job
  fi
}

reload() {
  cd "$ROBAIR_HOME"
  start_quiet_mode reload.log

  is_running
  running=$?
  is_running_systemd
  running_systemd=$?
  if [ "$running" -eq 0 ]; then
    start_job "Arrête RobAIR"
    stopme
    end_job
  fi

  do_reload

  if [ "$running" -eq 0 ]; then
    start_job "Relance RobAIR"
    if [ "$running_systemd" -eq 0 ]; then
      systemctl --user start robair.service
    else
      startme
    fi
    end_job
  fi

  stop_quiet_mode
  rm -f reload.log
  echo
  echo "$(tput setab 2)RobAIR a été rechargé$(tput sgr0)"
}

update() {
  cd "$ROBAIR_HOME"
  start_quiet_mode update.log

  is_running
  running=$?
  is_running_systemd
  running_systemd=$?
  if [ "$running" -eq 0 ]; then
    start_job "Arrête RobAIR"
    stopme
    end_job
  fi

  start_job "Met à jour le dépôt Git"
  (git fetch && git reset --hard origin/master) >>/dev/null 2>&1
  end_job

  start_job "Met à jour les dépendances du dépôt Git"
  git submodule init
  git submodule sync --recursive
  git submodule update --recursive
  end_job

  if ! ./scripts/run-migrations; then
    exit $?
  fi

  do_reload

  if [ "$running" -eq 0 ]; then
    start_job "Relance RobAIR"
    if [ "$running_systemd" -eq 0 ]; then
      systemctl --user start robair.service
    else
      startme
    fi
    end_job
  fi

  stop_quiet_mode
  rm -f update.log
  echo
  echo "$(tput setab 2)RobAIR a été mis à jour$(tput sgr0)"
}

print_ip() {
  find_ip
  echo "$ROBAIR_IP"
}


command="$1"
shift

case "$command" in
    start)   startme "$@" ;;
    stop)    stopme ;;
    restart) restart ;;
    status)  status ;;
    reload) reload ;;
    update) update ;;
    ip) print_ip ;;
    *) echo "usage: $0 start|stop|restart|status|reload|update" >&2
       exit 1
       ;;
esac
